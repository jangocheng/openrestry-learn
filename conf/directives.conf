worker_processes 1;

error_log logs/error.log debug;

events {
    worker_connections 1024;
}

# 这一个配置主要是学习 Nginx 指令的执行顺序

http {

    # You can use the excellent HttpUpstreamKeepaliveModule with this module to provide TCP connection pool for Redis.
    # A sample config snippet looks like this
    upstream redis_server {
        server 127.0.0.1:6379;

        # a pool with at most 1024 connections
        # and do not distinguish the servers:
        keepalive 10;
    }

    server {
        listen 8081;

        location / {
            root /Users/yuanxin/www;
            index index.html index.htm;
        }

        # 如果访问 http://localhost:8081/，会到这个 location 来
        #
        # 首先对于用户的原始请求 GET /，Nginx 匹配出 location / 来处理它，
        # 然后 content 阶段的 ngx_index 模块在 /var/www/ 下找到了 index.html，
        # 于是立即发起一个到 /index.html 位置的 +内部跳转+
        #
        # 但是如果不存在 index.html，那么则会返回 403
        #
        # 在 content 阶段默认“垫底”的最后一个模块便是极为常用的 ngx_static 模块。
        # 这个模块主要实现服务静态文件的功能。
        # 比方说，一个网站的静态资源，包括静态 .html 文件、静态 .css 文件、静态 .js 文件、以及静态图片文件等等，
        # 全部可以通过这个模块对外服务。
        # 前面介绍的 ngx_index 模块虽然可以在指定的首页文件存在时发起“内部跳转”，
        # 但真正把相应的首页文件服务出去（即把该文件的内容作为响应体数据输出，并设置相应的响应头），
        # 还是得靠这个 ngx_static 模块来完成。
        #
        # ngx_static 模块总是处于开启状态，但是否轮得到它运行就要看 content 阶段先于它运行的那些模块是否“弃权”了
        #
        location /index.html {
            echo "hello, world, from location /index.html {}";
        }

        # 调试日志
        # http script value: "32"
        # http script set $a
        # http script value: "56"
        # http script set $a
        # http output filter "/test?"
        # http output filter "/test?"
        # http output filter "/test?"
        #
        # 最终输出结果都是 56
        #
        # <解释>
        #
        # 凡在 Nginx 中输出响应体数据时，都会调用 Nginx 的所谓“输出过滤器”（output filter），
        # 我们一直在使用的 echo 指令自然也不例外。而一旦调用 Nginx 的“输出过滤器”，便会产生类似下面这样的调试信息：
        # [debug] 5363#0: *1 http output filter "/test?"
        # 当然，这里的 "/test?" 部分对于其他接口可能会发生变化，因为它显示的是当前请求的 URI.
        # 这样联系起来看，就不难发现，上例中的那两条 set 语句确实都是在那两条 echo 语句之前执行的。
        #
        # 细心的读者可能会问，为什么这个例子明明只使用了两条 echo 语句进行输出，
        # 但却有三行 http output filter 调试信息呢？
        # 其实，前两行 http output filter 信息确实分别对应那两条 echo 语句，
        # 而最后那一行信息则是对应 ngx_echo 模块输出指示响应体末尾的结束标记。
        # 正是为了输出这个特殊的结束标记，才会多出一次对 Nginx “输出过滤器”的调用。
        # 包括 ngx_proxy 在内的许多模块在输出响应体数据流时都具有此种行为。
        #
        # <高阶>
        #
        # 每个指令都有它的运行时期，而 +echo+ 则是在内容输出时期，即 phase: content
        #
        # <重要> 配置里的指令都是 +声明性+ 的，而 +非过程性+ 的!!!!
        # Nginx 的作者 Igor Sysoev 在公开场合曾不止一次地强调，
        # Nginx 配置文件所使用的语言本质上是+声明性的+，
        # 而非 +过程性的+（procedural）。
        #
        location /test {
            set $a 32;
            echo $a;

            set $a 56;
            echo $a;
        }

        # 第三方模块 ngx_lua 提供的 rewrite_by_lua 配置指令也和 more_set_input_headers 一样运行在 rewrite 阶段的末尾
        # 结果是 33
        location /rewrite_var {
            set $a 31;
            rewrite_by_lua "ngx.var.a = ngx.var.a + 1";
            set $a 32;

            echo $a;
        }

        # 在 rewrite 阶段之后，有一个名叫 access 的请求处理阶段。
        # Nginx 变量漫谈（五） 中介绍过的第三方模块 ngx_auth_request 的指令就运行在 access 阶段。
        # 在 access 阶段运行的配置指令多是执行访问控制性质的任务，比如检查用户的访问权限，
        # 检查用户的来源 IP 地址是否合法，诸如此类。
        #
        # 值得一提的是， ngx_access 模块还支持所谓的“CIDR 记法”来表示一个网段，
        # 例如 169.200.179.4/24 则表示路由前缀是 169.200.179.0（或者说子网掩码是 255.255.255.0）的网段。
        # 因为 ngx_access 模块的指令运行在 access 阶段，而 access 阶段又处于 rewrite 阶段之后，
        # 所以前面我们见到的所有那些在 rewrite 阶段运行的配置指令，都总是在 allow 和 deny 之前执行，
        # 而无论它们在配置文件中的书写顺序是怎样的。所以，为了避免阅读配置时的混乱，
        # 我们应该总是让指令的书写顺序和它们的实际执行顺序保持一致。
        location /access {
            allow 127.0.0.1;
            deny all;
            echo "hello, world";
        }

        # 利用 access_by_lua 来实现 ngx_access 模块的 IP 地址过滤功能
        # lua 和原生的 C 模块实现都非常快
        location /access_by_lua {
            access_by_lua '
                if ngx.var.remote_addr == "127.0.0.1" then
                    return
                end

                ngx.exit(403)
            ';

            echo "allow access_by_lua";
        }

        # Nginx 的 content 阶段是所有请求处理阶段中最为重要的一个，
        # 因为运行在这个阶段的配置指令一般都肩负着生成“内容”（content）并输出 HTTP 响应的使命。
        # 正因为其重要性，这个阶段的配置指令也异常丰富，例如前面我们一直在示例中广泛使用的 echo 指令，
        # 在 Nginx 变量漫谈（二） 中接触到的 echo_exec 指令，
        # Nginx 变量漫谈（三） 中接触到的 proxy_pass 指令，
        # Nginx 变量漫谈（五） 中介绍过的 echo_location 指令，
        # 以及 Nginx 变量漫谈（七） 中介绍过的 content_by_lua 指令，都运行在这个阶段。
        #
        # content 阶段属于一个比较靠后的处理阶段，运行在先前介绍过的 rewrite 和 access 这两个阶段之后。
        # 当和 rewrite、access 阶段的指令一起使用时，这个阶段的指令总是最后运行

        # 运行结果输出的是 lua 的部分
        # 如果交换顺序，那么输出的是 echo 部分
        # 所以我们应当避免在同一个 location 中使用多个模块的 content 阶段指令
        location /echo_vs_content_by_lua {
            echo 'hello';
            content_by_lua 'ngx.say("world")';
        }

        # 标准模块 ngx_realip 就在 post-read 阶段注册了处理程序，
        # 它的功能是迫使 Nginx 认为当前请求的来源地址是指定的某一个请求头的值。
        #
        # 注：需要在编译 nginx 的时候加入 nginx-realip 模块
        #
        # curl -H 'X-My-IP: 1.2.3.4' localhost:8080/realip
        # from: 1.2.3.4
        # set_real_ip_from '127.0.0.1';
        # real_ip_header X-My-IP;

        # location /realip {
        #     set $addr $remote_addr;
        #     echo "from: $addr";
        # }


        # 为了解决这个难题， ngx_realip 模块便又特意在 preaccess 阶段注册了处理程序，
        # 这样它才有机会运行 location 块中的配置指令。正是因为这个缘故，上面这个例子的运行结果才符合直觉预期：

        #     $ curl -H 'X-Real-IP: 1.2.3.4' localhost:8080/test
        #     from: 1.2.3.4
        # 不幸的是， ngx_realip 模块的这个解决方案还是存在漏洞的，比如下面这个例子：

        #     server {
        #         listen 8080;

        #         location /test {
        #             set_real_ip_from 127.0.0.1;
        #             real_ip_header X-Real-IP;

        #             set $addr $remote_addr;
        #             echo "from: $addr";
        #         }
        #     }
        #
        # 这里，我们在 rewrite 阶段将 $remote_addr 的值保存到了用户变量 $addr 中，然后再输出。
        # 因为 rewrite 阶段先于 preaccess 阶段执行，所以当 ngx_realip 模块尚未在 preaccess 阶段改写来源地址时，
        # 最初的来源地址就已经在 rewrite 阶段被读取了。上例的实际请求结果证明了我们的结论：

        #     $ curl -H 'X-Real-IP: 1.2.3.4' localhost:8080/test
        #     from: 127.0.0.1
        #
        # 输出的地址确实是未经改写过的。Nginx 的“调试日志”可以进一步确认这一点：

        #     $ grep -E 'http script (var|set)|realip' logs/error.log
        #     [debug] 32488#0: *1 http script var: "127.0.0.1"
        #     [debug] 32488#0: *1 http script set $addr
        #     [debug] 32488#0: *1 realip: "1.2.3.4"
        #     [debug] 32488#0: *1 realip: 0100007F FFFFFFFF 0100007F
        #     [debug] 32488#0: *1 http script var: "127.0.0.1"

        # GET /redis/get?key=some_key
        location = /redis/get {
            set_unescape_uri $key $arg_key;  # this requires ngx_set_misc
            redis2_query get $key;
            redis2_pass redis_server;
        }

        # GET /redis/set?key=one&val=first%20value
        location = /redis/set {
            set_unescape_uri $key $arg_key;  # this requires ngx_set_misc
            set_unescape_uri $val $arg_val;  # this requires ngx_set_misc
            redis2_query set $key $val;
            redis2_pass redis_server;
        }
    }
}
