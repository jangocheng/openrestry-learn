worker_processes 1;

error_log logs/error.log;

events {
    worker_connections 1024;
}

# 1. Nginx 变量
#   set 指令可以隐式创建 Nginx 变量
#       Nginx 变量名的可见范围虽然是整个配置，但每个请求都有所有变量的独立副本
#       或者说都有各变量用来存放值的容器的独立副本，彼此互不干扰
#   预定义变量/内置变量（builtin variables）
#       ngx_http_core
#           $uri 获取经过解码的 url，但不包含参数
#           $request_uri 获取请求最原始的 URI （未经解码，并且包含请求参数）
#
#   未定义的变量，Nginx 会自动地为其注册一个【取处理程序】，返回空字符串

http {

    # 类似于数学里的 +函数+，$mapped_args 是因变量，$args 是自变量
    map $args $mapped_args {
        # 当下面所有条件都不匹配时，那么 $mapped_args 的值为 0
        default 0;

        # 当 $args 的值为 'debug' 时，$mapped_args 的值为 1
        debug 1;
    }

    server {
        listen 8081;

        location / {
            set $a '<p>hello, world from</p>';
            default_type text/html;
            content_by_lua '
                ngx.say(ngx.var.a);
            ';
        }

        # 通过 nginx_lua
        # 通过 lua，我们可以知道某个变量是不是不存在，而通过 nginx 是做不到的
        #
        # ➜  ~ curl http://localhost:8081/undefined_var
        # name: missing
        # ➜  ~ curl http://localhost:8081/undefined_var\?name\=邱源鑫
        # name: [邱源鑫]
        #
        location /undefined_var {
            default_type text/html;
            content_by_lua '
                if ngx.var.arg_name == nil then
                    ngx.say("name: missing")
                else
                    ngx.say("name: [", ngx.var.arg_name, "]")
                end
            ';
        }

        # ngx_array_var 第三方模块使得 nginx 的变量可以为数组
        #
        # 这个例子中使用了 ngx_array_var 模块的 array_split、 array_map 和 array_join 这三条配置指令，
        # 其含义很接近 Perl 语言中的内建函数 split、map 和 join（当然，其他脚本语言也有类似的等价物）。我们来看看访问 /test 接口的结果：
        #
        # $ curl 'http://localhost:8081/array?names=Tom,Jim,Bob'
        # [Tom] [Jim] [Bob]
        location /array {
            array_split "," $arg_names to=$array;
            array_map "[$array_it]" $array;
            array_join " " $array to=$res;

            echo $res;
        }

        # 2. 内部跳转，只是 location 换了，但是变量副本不变
        # 2.1 使用第三方模块 ngx_echo
        location /foo {
            set $b 'from /foo but echo_exec to /variable_b';
            echo_exec /variable_b;
        }

        # 2.1 使用标准模块 ngx_rewrite
        location /bar {
            set $b 'from /bar but rewrite to /variable_b';
            rewrite ^ /variable_b;
        }

        location /variable_b {
            default_type text/html;
            echo $b;
        }

        # 获取内置变量
        location /builtin_vars {
            echo "uri = $uri";
            echo "request_uri = $request_uri";
        }

        # 变量改写
        # 获取请求名为 name(NAME,Name) 的 URI 参数的值（未经解码）
        location /arg_vars {
            echo "name: $arg_name";
            echo "class: $arg_class";

            # 使用 ngx_set_misc 模块
            # 对变量进行解码
            echo "\n";
            set_unescape_uri $name $arg_name;
            set_unescape_uri $class $arg_class;
            echo "name: $name";
            echo "class: $class";
        }

        # 参数变量改写
        #
        # 需要特别指出的是，这里的 $args 变量和 $arg_XXX 一样，也不再使用属于自己的存放值的容器。
        # 当我们读取 $args 时，Nginx 会执行一小段代码，
        # 从 Nginx 核心中专门存放当前 URL 参数串的位置去读取数据；
        # 而当我们改写 $args 时，Nginx 会执行另一小段代码，对相同位置进行改写。
        # Nginx 的其他部分在需要当前 URL 参数串的时候，都会从那个位置去读数据，所以我们对 $args 的修改会影响到所有部分的功能。
        location /rewrite_vars {
            set $orig_args $args;
            set $args "a=3&b=4";

            echo "original args: $orig_args";
            echo "args: $args";
        }

        # 这将会影响到 18081 的输出为：/rewrite_vars_accross_servers
        # 也就是说明对 $args 的改写会影响到 ngx_proxy 模块的行为
        #
        # 与面向对象编程中的“存取器”概念相对应，Nginx 变量也是支持绑定“存取处理程序”的。
        # Nginx 模块在创建变量时，可以选择是否为变量分配存放值的容器，以及是否自己提供与读写操作相对应的“存取处理程序”。
        # 不是所有的 Nginx 变量都拥有存放值的容器。
        # 拥有值容器的变量在 Nginx 核心中被称为“被索引的”（indexed）；
        # 反之，则被称为“未索引的”（non-indexed）。
        # 我们前面在 （二） 中已经知道，像 $arg_XXX 这样具有无数变种的变量群，是“未索引的”。
        # 当读取这样的变量时，其实是它的“取处理程序”在起作用，
        # 即实时扫描当前请求的 URL 参数串，提取出变量名所指定的 URL 参数的值。
        # 很多新手都会对 $arg_XXX 的实现方式产生误解，以为 Nginx 会事先解析好当前请求的所有 URL 参数，
        # 并且把相关的 $arg_XXX 变量的值都事先设置好。
        # 然而事实并非如此，Nginx 根本不会事先就解析好 URL 参数串，而是在用户读取某个 $arg_XXX 变量时，
        # 调用其“取处理程序”，即时去扫描 URL 参数串。
        # 类似地，内建变量 $cookie_XXX 也是通过它的“取处理程序”，即时去扫描 Cookie 请求头中的相关定义的。
        location /rewrite_vars_accross_servers {
            set $args 'foo=1&bar=2';
            set $arg_foo "hahah"; # 不会影响到 $args
            proxy_pass http://127.0.0.1:18081/rewrite_vars_accross_servers;
        }

        # ngx_map 模块（惰性求值）
        # 1. curl http://localhost:8081/ngx_map
        #    original mapped_args: 0
        #    mapped_args: 0
        # 2. curl http://localhost:8081/ngx_map?debug
        #    original mapped_args: 1
        #    mapped_args: 1
        location /ngx_map {
            set $orig_mapped_args $mapped_args;

            # 之所以无效，是因为 根据映射规则计算出的值被缓存住了
            set $args debug;

            echo "original mapped_args: $orig_mapped_args";
            echo "mapped_args: $mapped_args";
        }

        # 主请求和子请求
        #
        # +子请求+ 在外观上很像 HTTP 请求，但实现上却和 HTTP 协议乃至网络通信一点儿关系都没有。
        # 它是 Nginx 内部的一种抽象调用，目的是为了方便用户把“主请求”的任务分解为多个较小粒度的“内部请求”，
        # 并发或串行地访问多个 location 接口，然后由这些 location 接口通力协作，共同完成整个“主请求”。
        #
        # 另外，变量名不会互相干扰，都是获取自己的副本
        #
        # 另外，并非所有的变量都会作用于子请求
        #
        # 另外，ngx_auth_request 的子请求采用了与主请求变量共享，这不是一个好习惯。
        location /main_request {
            set $var 'main';
            echo_location /sub_request1;
            echo_location /sub_request2;
            echo "main: $var";
            echo "main method: $request_method";
            echo "main echo method: $echo_request_method";
        }

        location /sub_request1 {
            set $var 'sub_request1';
            echo $var;
            echo "sub method: $request_method";
            echo "sub echo method: $echo_request_method";
        }

        location /sub_request2 {
            set $var 'sub_request2';
            echo $var;
        }
    }

    server {
        listen 18081;
        location /rewrite_vars_accross_servers {
            echo "args: $args";
        }
    }
}
